// <auto-generated />
using System;
using GranjaTech.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GranjaTech.Infrastructure.Migrations
{
    [DbContext(typeof(GranjaTechDbContext))]
    [Migration("20250828190517_DB")]
    partial class DB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GranjaTech.Domain.ConsumoAgua", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvesVivas")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("QuantidadeLitros")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<decimal?>("TemperaturaAmbiente")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("LoteId", "Data");

                    b.ToTable("ConsumosAgua");
                });

            modelBuilder.Entity("GranjaTech.Domain.ConsumoRacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvesVivas")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("QuantidadeKg")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<string>("TipoRacao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("LoteId", "Data");

                    b.ToTable("ConsumosRacao");
                });

            modelBuilder.Entity("GranjaTech.Domain.EventoSanitario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvesTratadas")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Custo")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Dosagem")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("DuracaoTratamentoDias")
                        .HasColumnType("integer");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer");

                    b.Property<string>("LoteProduto")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("PeriodoCarenciaDias")
                        .HasColumnType("integer");

                    b.Property<string>("Produto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ResponsavelAplicacao")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Sintomas")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ViaAdministracao")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("LoteId");

                    b.ToTable("EventosSanitarios");
                });

            modelBuilder.Entity("GranjaTech.Domain.FinanceiroProdutor", b =>
                {
                    b.Property<int>("FinanceiroId")
                        .HasColumnType("integer");

                    b.Property<int>("ProdutorId")
                        .HasColumnType("integer");

                    b.HasKey("FinanceiroId", "ProdutorId");

                    b.HasIndex("ProdutorId");

                    b.ToTable("FinanceiroProdutor");
                });

            modelBuilder.Entity("GranjaTech.Domain.Granja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Localizacao")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Granjas");
                });

            modelBuilder.Entity("GranjaTech.Domain.LeituraSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SensorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("LeiturasSensores");
                });

            modelBuilder.Entity("GranjaTech.Domain.LogAuditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Acao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Detalhes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsuarioEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LogsAuditoria");
                });

            modelBuilder.Entity("GranjaTech.Domain.Lote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AreaGalpao")
                        .HasColumnType("numeric");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("DataAbatePrevista")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataSaida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer");

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Linhagem")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("OrigemPintinhos")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("QuantidadeAvesAtual")
                        .HasColumnType("integer");

                    b.Property<int>("QuantidadeAvesInicial")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("GranjaId");

                    b.ToTable("Lotes");
                });

            modelBuilder.Entity("GranjaTech.Domain.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Perfis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Produtor"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Financeiro"
                        });
                });

            modelBuilder.Entity("GranjaTech.Domain.PesagemSemanal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CoeficienteVariacao")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataPesagem")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DesvioPadrao")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GanhoSemanal")
                        .HasColumnType("numeric");

                    b.Property<int>("IdadeDias")
                        .HasColumnType("integer");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("PesoMaximo")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PesoMedioGramas")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal?>("PesoMinimo")
                        .HasColumnType("numeric");

                    b.Property<int>("QuantidadeAmostrada")
                        .HasColumnType("integer");

                    b.Property<int>("SemanaVida")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LoteId", "SemanaVida");

                    b.ToTable("PesagensSemanais");
                });

            modelBuilder.Entity("GranjaTech.Domain.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("numeric");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnidadeDeMedida")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GranjaId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("GranjaTech.Domain.QualidadeAr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CO2_ppm")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EquipamentoMedicao")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LocalMedicao")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Luminosidade_lux")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("NH3_ppm")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("O2_percentual")
                        .HasColumnType("numeric");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("TemperaturaAr")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("UmidadeRelativa")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VelocidadeAr_ms")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("LoteId");

                    b.ToTable("MedicoesQualidadeAr");
                });

            modelBuilder.Entity("GranjaTech.Domain.RegistroAbate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvesCondenadas")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAbate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataAbatePrevista")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FrigorificoDestino")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("IdadeAbateDias")
                        .HasColumnType("integer");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer");

                    b.Property<string>("MotivoCondenacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("PesoCarcacaTotalKg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PesoCondenadoKg")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PesoVivoTotalKg")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<int>("QuantidadeEnviada")
                        .HasColumnType("integer");

                    b.Property<string>("Transportadora")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("ValorPorKg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ValorTotalRecebido")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("LoteId");

                    b.ToTable("RegistrosAbate");
                });

            modelBuilder.Entity("GranjaTech.Domain.RegistroMortalidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AcaoTomada")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("AvesVivas")
                        .HasColumnType("integer");

                    b.Property<string>("CausaPrincipal")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdadeDias")
                        .HasColumnType("integer");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("PesoMedioMortas")
                        .HasColumnType("numeric");

                    b.Property<int>("QuantidadeMortas")
                        .HasColumnType("integer");

                    b.Property<string>("ResponsavelRegistro")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("LoteId", "Data");

                    b.ToTable("RegistrosMortalidade");
                });

            modelBuilder.Entity("GranjaTech.Domain.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer");

                    b.Property<string>("IdentificadorUnico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GranjaId");

                    b.ToTable("Sensores");
                });

            modelBuilder.Entity("GranjaTech.Domain.TransacaoFinanceira", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LoteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimestampCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("LoteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TransacoesFinanceiras");
                });

            modelBuilder.Entity("GranjaTech.Domain.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PerfilId")
                        .HasColumnType("integer");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "ADM-001",
                            Email = "admin@admin.com",
                            Nome = "Admin Padrão",
                            PerfilId = 1,
                            SenhaHash = "$2a$11$Y.7g.3s5B5B5B5B5B5B5B.u5n5n5n5n5n5n5n5n5n5n5n5n5n5n5n5"
                        });
                });

            modelBuilder.Entity("GranjaTech.Domain.ConsumoAgua", b =>
                {
                    b.HasOne("GranjaTech.Domain.Lote", "Lote")
                        .WithMany("ConsumosAgua")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("GranjaTech.Domain.ConsumoRacao", b =>
                {
                    b.HasOne("GranjaTech.Domain.Lote", "Lote")
                        .WithMany("ConsumosRacao")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("GranjaTech.Domain.EventoSanitario", b =>
                {
                    b.HasOne("GranjaTech.Domain.Lote", "Lote")
                        .WithMany("EventosSanitarios")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("GranjaTech.Domain.FinanceiroProdutor", b =>
                {
                    b.HasOne("GranjaTech.Domain.Usuario", "Financeiro")
                        .WithMany("ProdutoresGerenciados")
                        .HasForeignKey("FinanceiroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GranjaTech.Domain.Usuario", "Produtor")
                        .WithMany("FinanceirosAssociados")
                        .HasForeignKey("ProdutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Financeiro");

                    b.Navigation("Produtor");
                });

            modelBuilder.Entity("GranjaTech.Domain.Granja", b =>
                {
                    b.HasOne("GranjaTech.Domain.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GranjaTech.Domain.LeituraSensor", b =>
                {
                    b.HasOne("GranjaTech.Domain.Sensor", "Sensor")
                        .WithMany("Leituras")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("GranjaTech.Domain.Lote", b =>
                {
                    b.HasOne("GranjaTech.Domain.Granja", "Granja")
                        .WithMany()
                        .HasForeignKey("GranjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Granja");
                });

            modelBuilder.Entity("GranjaTech.Domain.PesagemSemanal", b =>
                {
                    b.HasOne("GranjaTech.Domain.Lote", "Lote")
                        .WithMany("PesagensSemanais")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("GranjaTech.Domain.Produto", b =>
                {
                    b.HasOne("GranjaTech.Domain.Granja", "Granja")
                        .WithMany()
                        .HasForeignKey("GranjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Granja");
                });

            modelBuilder.Entity("GranjaTech.Domain.QualidadeAr", b =>
                {
                    b.HasOne("GranjaTech.Domain.Lote", "Lote")
                        .WithMany("MedicoesQualidadeAr")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("GranjaTech.Domain.RegistroAbate", b =>
                {
                    b.HasOne("GranjaTech.Domain.Lote", "Lote")
                        .WithMany("RegistrosAbate")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("GranjaTech.Domain.RegistroMortalidade", b =>
                {
                    b.HasOne("GranjaTech.Domain.Lote", "Lote")
                        .WithMany("RegistrosMortalidade")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("GranjaTech.Domain.Sensor", b =>
                {
                    b.HasOne("GranjaTech.Domain.Granja", "Granja")
                        .WithMany()
                        .HasForeignKey("GranjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Granja");
                });

            modelBuilder.Entity("GranjaTech.Domain.TransacaoFinanceira", b =>
                {
                    b.HasOne("GranjaTech.Domain.Lote", "Lote")
                        .WithMany()
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GranjaTech.Domain.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GranjaTech.Domain.Usuario", b =>
                {
                    b.HasOne("GranjaTech.Domain.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("GranjaTech.Domain.Lote", b =>
                {
                    b.Navigation("ConsumosAgua");

                    b.Navigation("ConsumosRacao");

                    b.Navigation("EventosSanitarios");

                    b.Navigation("MedicoesQualidadeAr");

                    b.Navigation("PesagensSemanais");

                    b.Navigation("RegistrosAbate");

                    b.Navigation("RegistrosMortalidade");
                });

            modelBuilder.Entity("GranjaTech.Domain.Sensor", b =>
                {
                    b.Navigation("Leituras");
                });

            modelBuilder.Entity("GranjaTech.Domain.Usuario", b =>
                {
                    b.Navigation("FinanceirosAssociados");

                    b.Navigation("ProdutoresGerenciados");
                });
#pragma warning restore 612, 618
        }
    }
}
