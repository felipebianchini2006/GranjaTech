// <auto-generated />
using System;
using GranjaTech.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GranjaTech.Infrastructure.Migrations
{
    [DbContext(typeof(GranjaTechDbContext))]
    [Migration("20250819175246_ConfigureCascadeDelete")]
    partial class ConfigureCascadeDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GranjaTech.Domain.FinanceiroProdutor", b =>
                {
                    b.Property<int>("FinanceiroId")
                        .HasColumnType("integer");

                    b.Property<int>("ProdutorId")
                        .HasColumnType("integer");

                    b.HasKey("FinanceiroId", "ProdutorId");

                    b.HasIndex("ProdutorId");

                    b.ToTable("FinanceiroProdutor");
                });

            modelBuilder.Entity("GranjaTech.Domain.Granja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Localizacao")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Granjas");
                });

            modelBuilder.Entity("GranjaTech.Domain.Lote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataSaida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer");

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuantidadeAvesInicial")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GranjaId");

                    b.ToTable("Lotes");
                });

            modelBuilder.Entity("GranjaTech.Domain.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Perfis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Produtor"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Financeiro"
                        });
                });

            modelBuilder.Entity("GranjaTech.Domain.TransacaoFinanceira", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LoteId")
                        .HasColumnType("integer");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("LoteId");

                    b.ToTable("TransacoesFinanceiras");
                });

            modelBuilder.Entity("GranjaTech.Domain.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PerfilId")
                        .HasColumnType("integer");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("GranjaTech.Domain.FinanceiroProdutor", b =>
                {
                    b.HasOne("GranjaTech.Domain.Usuario", "Financeiro")
                        .WithMany("ProdutoresGerenciados")
                        .HasForeignKey("FinanceiroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GranjaTech.Domain.Usuario", "Produtor")
                        .WithMany("FinanceirosAssociados")
                        .HasForeignKey("ProdutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Financeiro");

                    b.Navigation("Produtor");
                });

            modelBuilder.Entity("GranjaTech.Domain.Granja", b =>
                {
                    b.HasOne("GranjaTech.Domain.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GranjaTech.Domain.Lote", b =>
                {
                    b.HasOne("GranjaTech.Domain.Granja", "Granja")
                        .WithMany()
                        .HasForeignKey("GranjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Granja");
                });

            modelBuilder.Entity("GranjaTech.Domain.TransacaoFinanceira", b =>
                {
                    b.HasOne("GranjaTech.Domain.Lote", "Lote")
                        .WithMany()
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("GranjaTech.Domain.Usuario", b =>
                {
                    b.HasOne("GranjaTech.Domain.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("GranjaTech.Domain.Usuario", b =>
                {
                    b.Navigation("FinanceirosAssociados");

                    b.Navigation("ProdutoresGerenciados");
                });
#pragma warning restore 612, 618
        }
    }
}
